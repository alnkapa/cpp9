TODO: предложить пользователю выбор хеш функции в зависимости от размера блока. Пока сделать такое не готов !

Использование хеш-функций в зависимости от размера сравниваемого блока может варьироваться в зависимости от конкретных требований к производительности, памяти и целостности данных. Вот общее руководство по выбору размера блока и соответствующей хеш-функции:
1. Размер блока: 1 байт

    Использование: Сравнение отдельных байтов, например, для проверки целостности данных на уровне байтов.
    Хеш-функция: Не рекомендуется использовать хеш-функции, так как это неэффективно. Лучше использовать прямое сравнение байтов.
    Преимущества: Высокая точность.
    Недостатки: Низкая производительность, высокая нагрузка на процессор.

2. Размер блока: 64 байта

    Использование: Подходит для небольших файлов или для проверки целостности данных в потоках.
    Хеш-функция: MD5 или SHA-1 (для не критичных задач).
    Преимущества: Умеренная производительность, возможность обнаружения изменений.
    Недостатки: Уязвимость к коллизиям (особенно для MD5 и SHA-1).

3. Размер блока: 256 байт

    Использование: Подходит для сравнения небольших файлов или для потоковой обработки данных.
    Хеш-функция: SHA-256.
    Преимущества: Хороший баланс между производительностью и безопасностью.
    Недостатки: Все еще может быть неэффективным для очень больших файлов.

4. Размер блока: 1 КБ (1024 байта)

    Использование: Эффективно для большинства текстовых и бинарных файлов.
    Хеш-функция: SHA-256 или BLAKE2.
    Преимущества: Умеренная производительность, хорошая защита от коллизий.
    Недостатки: Может потребовать больше памяти для хранения хешей.

5. Размер блока: 4 КБ (4096 байт)

    Использование: Подходит для сравнения больших файлов, таких как изображения или видео.
    Хеш-функция: SHA-256 или BLAKE2.
    Преимущества: Высокая производительность, хорошая защита от коллизий.
    Недостатки: Увеличение времени на вычисление хешей для очень больших файлов.

6. Размер блока: 16 КБ (16384 байта)

    Использование: Эффективно для больших файлов и потоков данных.
    Хеш-функция: SHA-256 или BLAKE2.
    Преимущества: Высокая производительность, минимизация накладных расходов на хеширование.
    Недостатки: Увеличение времени на вычисление хешей для очень больших файлов.

7. Размер блока: 64 КБ (65536 байт)

    Использование: Подходит для очень больших файлов, таких как базы данных или архивы.
    Хеш-функция: SHA-256 или BLAKE2.
    Преимущества: Очень высокая производительность, минимизация накладных расходов.
    Недостатки: Может потребовать значительных ресурсов памяти.

8. Размер блока: 1 МБ (1048576 байт)

    Использование: Эффективно для обработки больших файлов, таких как видео или большие архивы.
    Хеш-функция: SHA-256 или BLAKE2.
    Преимущества: Максимальная производительность, минимизация накладных расходов.
    Недостатки: Высокие требования к памяти и времени на вычисление хешей.


1. Криптографические хеш-функции

    SHA-1: Генерирует 160-битный хеш. Ранее широко использовалась, но сейчас считается устаревшей из-за уязвимостей.
    SHA-256: Часть семейства SHA-2, генерирует 256-битный хеш. Широко используется для обеспечения безопасности.
    SHA-3: Последнее дополнение к семейству SHA, использует совершенно другую конструкцию (Keccak). Обеспечивает высокий уровень безопасности.
    BLAKE2: Быстрая и безопасная хеш-функция, которая может быть быстрее, чем MD5 и SHA-1, при этом обеспечивая высокий уровень безопасности.

2. Некриптографические хеш-функции

    MD5: Генерирует 128-битный хеш. Быстрая, но имеет известные уязвимости, поэтому не рекомендуется для криптографических целей.
    FNV (Fowler–Noll–Vo): Быстрая хеш-функция, хорошо подходит для хеширования строк и небольших данных.
    MurmurHash: Быстрая хеш-функция, хорошо подходит для хеширования больших объемов данных. Имеет несколько версий (MurmurHash2, MurmurHash3).
    CityHash: оптимизирована для хеширования строк и обеспечивает высокую производительность.
    xxHash: Очень быстрая хеш-функция, которая обеспечивает хорошую производительность и низкие коллизии. Подходит для больших объемов данных.

3. Специальные хеш-функции

    CRC32: Циклический избыточный код, часто используется для проверки целостности данных в сетевых протоколах и файловых системах.
    SipHash: Быстрая хеш-функция, предназначенная для защиты от атак на хеш-таблицы. Используется в некоторых реализациях хеш-таблиц.
    SpookyHash: Быстрая хеш-функция, разработанная для обеспечения высокой производительности и низкой вероятности коллизий.


1. OpenSSL (+)
    Поддерживаемые функции: MD5, SHA-1, SHA-256, SHA-512, SHA-3

7. Boost.CRC (+)
    Поддерживаемые функции: CRC32.

